name: CI/CD Pipeline

on:
  pull_request:
    branches: [ "main" ]   # PR 생성 시 코드 테스트 (CI)
  push:
    branches: [ "main" ]   # main에 merge 후 자동 배포 (CD)

jobs:
  # -------------------------------
  # CI: Pull Request 시 코드 검증
  # -------------------------------
  ci-test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run lint and basic tests
        run: |
          echo "✅ Running code validation..."
          python -m compileall .
          echo "✅ Code syntax check passed."

  # -------------------------------
  # CD: Merge 후 EC2에 배포
  # -------------------------------
  cd-deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Decide if rebuild is needed
        id: rebuild
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -qE 'Dockerfile|requirements.txt'; then
            echo "REBUILD=true" >> $GITHUB_ENV
          else
            echo "REBUILD=false" >> $GITHUB_ENV
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image (if needed)
        if: env.REBUILD == 'true'
        run: |
          IMAGE_TAG="becky77/mlops:${GITHUB_SHA::8}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/mlops-cloud-project-mlops-2
            echo "🔄 Pulling latest code from main branch..."
            git fetch origin main
            git pull origin main
            if [ "${REBUILD}" == "true" ]; then
              docker pull $IMAGE_TAG
              docker compose down
              docker compose up -d --build
            else
              docker compose restart airflow
            fi
            
  # build:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     # 코드만 수정 시 → 컨테이너 volume에 mount된 코드로 배포, rebuild 생략
  #     - name: Decide if rebuild is needed
  #       id: rebuild
  #       run: |
  #         if git diff --name-only HEAD~1 HEAD | grep -qE 'Dockerfile|requirements.txt'; then
  #           echo "REBUILD=true" >> $GITHUB_ENV
  #         else
  #           echo "REBUILD=false" >> $GITHUB_ENV
  #         fi
  #     ##############################################################

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Build and push Docker image (if needed)
  #       if: env.REBUILD == 'true'
  #       run: |
  #         IMAGE_TAG="becky77/mlops:${GITHUB_SHA::8}"
  #         echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
  #         docker build -t $IMAGE_TAG .
  #         docker push $IMAGE_TAG

  #     - name: (Debug) Check EC2 Host Value 
  #       run: echo "The EC2_HOST value is.. ${{ secrets.EC2_HOST }}"

  #     - name: Deploy to EC2
  #       uses: appleboy/ssh-action@v0.1.7
  #       if: github.ref == 'refs/heads/main'      # main 브랜치 push 시만 실행
  #       with:
  #         host: ${{ secrets.EC2_HOST }}
  #         username: ubuntu
  #         key: ${{ secrets.EC2_SSH_KEY }}

  #         script: |
  #           cd /home/ubuntu/mlops-cloud-project-mlops-2
  #           if [ "${REBUILD}" == "true" ]; then
  #             docker pull $IMAGE_TAG
  #             docker compose down
  #             docker compose up -d --build
  #           else
  #             docker compose restart airflow
  #           fi