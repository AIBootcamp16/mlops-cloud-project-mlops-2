# ============================================================
# 🧪 CI Pipeline for MLOps Music Recommender
# ------------------------------------------------------------
# 트리거: main 브랜치 push 시 자동 실행
# 목적:
#   - FastAPI (API) / Streamlit (UI) 빌드 검증
#   - Spotify secrets 기반 환경 설정 테스트
#   - 배포 전 코드 안정성 확보
# ============================================================

name: CI Pipeline (API & UI)

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_API: ${{ github.repository }}-api
  IMAGE_UI: ${{ github.repository }}-ui

permissions:
  contents: read

jobs:
  # ============================================================
  # 🎵 1️⃣ FastAPI Build & Test
  # ============================================================
  build-api:
    name: Validate FastAPI (Backend)
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. .env 생성 (Spotify Secrets + 안전 기본값)
      - name: Create .env file
        run: |
          cp .env.safe .env
          echo "SPOTIPY_CLIENT_ID=${{ secrets.SPOTIPY_CLIENT_ID }}" >> .env
          echo "SPOTIPY_CLIENT_SECRET=${{ secrets.SPOTIPY_CLIENT_SECRET }}" >> .env
          echo "MLFLOW_ADDR=http://mlops_runner:5000" >> .env

      # 3. Docker 빌드
      - name: Build FastAPI Docker image
        run: |
          docker build -f Dockerfile.api -t api-ci-test:latest .

      # 4. FastAPI 서버 헬스체크
      - name: Run FastAPI Healthcheck
        run: |
          docker run -d -p 8000:8000 --name api_ci api-ci-test:latest
          sleep 8
          curl -f http://localhost:8000/health || (docker logs api_ci && exit 1)
          docker stop api_ci

  # ============================================================
  # 🖥️ 2️⃣ Streamlit Build & Test
  # ============================================================
  build-ui:
    name: Validate Streamlit (Frontend)
    runs-on: ubuntu-latest
    needs: build-api

    steps:
      # 1. 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Docker 빌드 (UI)
      - name: Build Streamlit Docker image
        run: |
          docker build -f Dockerfile.ui -t ui-ci-test:latest .

      # 3. Streamlit 헬스체크
      - name: Run Streamlit Healthcheck
        run: |
          docker run -d -p 8501:8501 --name ui_ci ui-ci-test:latest
          sleep 10
          curl -f http://localhost:8501 || (docker logs ui_ci && exit 1)
          docker stop ui_ci

  # ============================================================
  # ✅ 3️⃣ Summary
  # ============================================================
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [ build-api, build-ui ]
    steps:
      - name: ✅ CI Complete
        run: echo "✅ All builds and healthchecks succeeded!"
