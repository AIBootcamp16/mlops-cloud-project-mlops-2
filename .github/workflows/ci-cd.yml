name: CI/CD Pipeline

on:
  # pull_request:
  #   branches: [ "main" ]   # PR 생성 시 코드 테스트 (CI)
  pull_request_target:
    branches: [ "main" ]
  push:
    branches: [ "main" ]   # main 브랜치에 merge 후 CD 실행

jobs:
  # ----------------------------------
  # CI: Pull Request 시 코드 검증, slack
  # ----------------------------------
  ci-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies (skip if unchanged)
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -qE 'requirements.txt'; then
            pip install -r requirements.txt
          else
            echo "requirements.txt unchanged, skipping install"
          fi

      - name: Run lint and basic tests
        run: |
          echo "✅ Running code validation..."
          python -m compileall .
          echo "✅ Code syntax check passed."

      - name: Send Slack notification (safe for fork PRs)
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "text": ":sparkles: *새로운 Pull Request가 생성되었습니다!*\n\n*Repository:* ${{ github.repository }}\n*작성자:* ${{ github.actor }}\n*제목:* ${{ github.event.pull_request.title }}\n*내용:* ${{ github.event.pull_request.body || 'No description provided.' }}\n*생성 시각:* ${{ github.event.pull_request.created_at }}\n\n<${{ github.event.pull_request.html_url }}|🔗 Pull Request 보러가기>"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # -------------------------------
  # CD: Merge 후 EC2에 배포, slack
  # -------------------------------
  cd-deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'AIBootcamp16/mlops-cloud-project-mlops-2'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Decide if rebuild is needed
        id: rebuild
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -qE 'Dockerfile|requirements.txt'; then
            echo "REBUILD=true" >> $GITHUB_ENV
          else
            echo "REBUILD=false" >> $GITHUB_ENV
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image (if needed)
        if: env.REBUILD == 'true'
        run: |
          IMAGE_TAG="becky77/mlops:${GITHUB_SHA::8}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/mlops-cloud-project-mlops-2
            echo "🔄 Pulling latest code from main branch..."
            git fetch origin main
            git pull origin main
            if [ "${REBUILD}" == "true" ]; then
              docker pull $IMAGE_TAG
              docker compose down
              docker compose up -d --build
            else
              docker compose restart airflow
            fi
            echo "✅ Deployment complete on EC2"

      - name: Notify Slack - Deployment Complete
        if: always()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "text": ":rocket: *배포 완료 알림*\n\n*Repository:* ${{ github.repository }}\n*배포 브랜치:* ${{ github.ref_name }}\n*병합된 PR:* ${{ github.event.head_commit.message }}\n*병합자:* ${{ github.actor }}\n*배포 시각:* ${{ github.event.head_commit.timestamp }}\n*커밋:* ${{ github.sha }}\n*배포 대상:* EC2 - ${{ secrets.EC2_HOST }}\n\n<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|🔗 커밋 보러가기>"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}