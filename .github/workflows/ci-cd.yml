# ============================================================
# 🚀 CI/CD Pipeline for gogoAiHunters MLOps Project
# ------------------------------------------------------------
# 트리거:
#   - main 브랜치 푸시
#   - 태그(v*) 푸시
#   - 수동 실행 (workflow_dispatch)
# 주요 기능:
#   - FastAPI / Streamlit Docker 빌드 및 헬스체크
#   - Spotify Secrets 기반 환경 검증
#   - 빌드 안정성 보장 (배포 전 자동 검증)
# ============================================================

name: CI/CD Pipeline (Auto Validation)

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  ORG: gogoaihunter                # ⚠️ 반드시 소문자 유지 (GHCR 규칙)
  IMAGE_API: mlops-cloud-project-mlops-2-api
  IMAGE_UI: mlops-cloud-project-mlops-2-ui

permissions:
  contents: read
  packages: read

jobs:
  # ============================================================
  # 🎵 1️⃣ FastAPI Build & Validation
  # ============================================================
  build-api:
    name: Validate FastAPI (Backend)
    runs-on: ubuntu-latest

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Create .env file
        run: |
          echo "SPOTIPY_CLIENT_ID=${{ secrets.SPOTIPY_CLIENT_ID }}" > .env
          echo "SPOTIPY_CLIENT_SECRET=${{ secrets.SPOTIPY_CLIENT_SECRET }}" >> .env
          echo "MLFLOW_ADDR=http://mlops_runner:5000" >> .env
          echo "✅ .env file created successfully"

      - name: 🏗️ Build FastAPI Docker image
        run: |
          docker build -f Dockerfile.api -t api-ci-test:latest .
          echo "✅ FastAPI image build completed"

      - name: 🧠 Run FastAPI Healthcheck
        run: |
          docker run -d -p 8000:8000 --name api_ci api-ci-test:latest
          echo "🕐 Waiting for FastAPI to start..."
          sleep 10
          echo "🔍 Checking /health endpoint..."
          if curl -fs http://localhost:8000/health; then
            echo "✅ FastAPI Healthcheck passed"
          else
            echo "❌ FastAPI Healthcheck failed"
            docker logs api_ci
            exit 1
          fi
          docker stop api_ci
          docker rm api_ci

  # ============================================================
  # 🖥️ 2️⃣ Streamlit Build & Validation
  # ============================================================
  build-ui:
    name: Validate Streamlit (Frontend)
    runs-on: ubuntu-latest
    needs: build-api

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Build Streamlit Docker image
        run: |
          docker build -f Dockerfile.ui -t ui-ci-test:latest .
          echo "✅ Streamlit image build completed"

      - name: 🧠 Run Streamlit Healthcheck
        run: |
          docker run -d -p 8501:8501 --name ui_ci ui-ci-test:latest
          echo "🕐 Waiting for Streamlit to start..."
          sleep 12
          echo "🔍 Checking Streamlit UI availability..."
          if curl -fs http://localhost:8501; then
            echo "✅ Streamlit Healthcheck passed"
          else
            echo "❌ Streamlit Healthcheck failed"
            docker logs ui_ci
            exit 1
          fi
          docker stop ui_ci
          docker rm ui_ci

  # ============================================================
  # ✅ 3️⃣ Summary
  # ============================================================
  summary:
    name: CI/CD Summary
    runs-on: ubuntu-latest
    needs: [build-api, build-ui]

    steps:
      - name: ✅ CI/CD Completed
        run: |
          echo "✅ All builds and healthchecks succeeded successfully!"
          echo "🎯 FastAPI and Streamlit validated under tag: ${{ github.ref_name }}"
