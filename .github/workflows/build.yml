# ============================================================
# 🚀 GitHub Actions: MLOps Music Recommender CI/CD Pipeline
# ------------------------------------------------------------
# 트리거:
#   - v* 태그 푸시 (예: v1.0.0-stable)
# 주요 기능:
#   - Spotify API Secrets 주입
#   - FastAPI / Streamlit Docker 이미지 빌드 및 검증
#   - GHCR(GitHub Container Registry) 푸시
# ============================================================

name: Build and Test (API & UI)

on:
  push:
    tags:
      - "v*"

env:
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: write

jobs:
  # ============================================================
  # 🎵 1️⃣ Build FastAPI Backend Image
  # ============================================================
  build-api:
    name: Build FastAPI (API)
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 저장소 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ 환경 파일 구성 (.env.safe + Spotify Secrets 덮어쓰기)
      - name: Set up environment (.env)
        run: |
          cp .env.safe .env || echo "⚠️ Using fallback environment"
          echo "SPOTIPY_CLIENT_ID=${{ secrets.SPOTIPY_CLIENT_ID }}" >> .env
          echo "SPOTIPY_CLIENT_SECRET=${{ secrets.SPOTIPY_CLIENT_SECRET }}" >> .env
          echo "MLFLOW_ADDR=http://mlops_runner:5000" >> .env

      # 3️⃣ Docker 로그인 (GHCR)
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4️⃣ FastAPI 이미지 빌드
      - name: Build FastAPI Docker image
        run: |
          REPO_LC=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          docker build -f Dockerfile.api -t ghcr.io/${REPO_LC}-api:${{ github.ref_name }} .

      # 5️⃣ 헬스체크 (단순 빌드 검증 — 서버 기동 테스트는 생략)
      - name: Verify image integrity
        run: |
          REPO_LC=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          docker run --rm ghcr.io/${REPO_LC}-api:${{ github.ref_name }} python -c "print('✅ FastAPI image build verified')"

      # 6️⃣ 이미지 푸시
      - name: Push API image to GHCR
        run: |
          REPO_LC=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          docker push ghcr.io/${REPO_LC}-api:${{ github.ref_name }}


  # ============================================================
  # 🖥️ 2️⃣ Build Streamlit Frontend Image
  # ============================================================
  build-ui:
    name: Build Streamlit (UI)
    runs-on: ubuntu-latest
    needs: build-api

    steps:
      # 1️⃣ 저장소 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Docker 로그인
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3️⃣ Streamlit 이미지 빌드
      - name: Build Streamlit Docker image
        run: |
          REPO_LC=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          docker build -f Dockerfile.ui -t ghcr.io/${REPO_LC}-ui:${{ github.ref_name }} .

      # 4️⃣ 단순 검증 (컨테이너 실행 확인)
      - name: Verify image integrity
        run: |
          REPO_LC=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          docker run --rm ghcr.io/${REPO_LC}-ui:${{ github.ref_name }} python -c "print('✅ Streamlit image build verified')"

      # 5️⃣ 이미지 푸시
      - name: Push UI image to GHCR
        run: |
          REPO_LC=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          docker push ghcr.io/${REPO_LC}-ui:${{ github.ref_name }}
