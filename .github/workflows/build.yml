# ============================================================
# üöÄ GitHub Actions: CI/CD for gogoAiHunters MLOps Project
# ------------------------------------------------------------
# Ìä∏Î¶¨Í±∞:
#   - v* ÌÉúÍ∑∏ Ìë∏Ïãú Ïãú Ïã§Ìñâ (Ïòà: v1.0.2-stable)
# Ï£ºÏöî Í∏∞Îä•:
#   - FastAPI / Streamlit Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è ÌÖåÏä§Ìä∏
#   - GHCR (GitHub Container Registry)Ïóê Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú
#   - Spotify API Secrets ÏûêÎèô Ï£ºÏûÖ
# ============================================================

name: Build and Push to gogoAiHunters GHCR

on:
  push:
    tags:
      - "v*"

env:
  REGISTRY: ghcr.io
  ORG: gogoAiHunters                 # ‚úÖ Ï†ïÌôïÌïú Ï°∞ÏßÅÎ™Ö (ÎåÄÎ¨∏Ïûê A, H)
  IMAGE_API: mlops-cloud-project-mlops-2-api
  IMAGE_UI: mlops-cloud-project-mlops-2-ui

permissions:
  contents: read
  packages: write

jobs:
  # ============================================================
  # üß© 1Ô∏è‚É£ Build FastAPI (API) Docker Image
  # ============================================================
  build-api:
    name: Build & Push FastAPI Image
    runs-on: ubuntu-latest

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4

      - name: üß∞ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üß© Prepare .env file
        run: |
          echo "MLFLOW_ADDR=http://mlops_runner:5000" > .env
          echo "SPOTIPY_CLIENT_ID=${{ secrets.SPOTIPY_CLIENT_ID }}" >> .env
          echo "SPOTIPY_CLIENT_SECRET=${{ secrets.SPOTIPY_CLIENT_SECRET }}" >> .env

      - name: üîë Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: üèóÔ∏è Build API Docker Image
        run: |
          docker build -f Dockerfile.api \
            -t ${{ env.REGISTRY }}/${{ env.ORG }}/${{ env.IMAGE_API }}:${{ github.ref_name }} .

      - name: ‚úÖ Healthcheck FastAPI
        run: |
          docker run -d -p 8000:8000 --name api_test \
            ${{ env.REGISTRY }}/${{ env.ORG }}/${{ env.IMAGE_API }}:${{ github.ref_name }}
          sleep 10
          curl -f http://localhost:8000/health || (docker logs api_test && exit 1)
          docker stop api_test

      - name: üì¶ Push API image to GHCR
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.ORG }}/${{ env.IMAGE_API }}:${{ github.ref_name }}

  # ============================================================
  # üñ•Ô∏è 2Ô∏è‚É£ Build Streamlit (UI) Docker Image
  # ============================================================
  build-ui:
    name: Build & Push Streamlit UI Image
    runs-on: ubuntu-latest
    needs: build-api

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4

      - name: üß∞ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîë Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: üèóÔ∏è Build Streamlit UI Docker Image
        run: |
          docker build -f Dockerfile.ui \
            -t ${{ env.REGISTRY }}/${{ env.ORG }}/${{ env.IMAGE_UI }}:${{ github.ref_name }} .

      - name: ‚úÖ Healthcheck Streamlit UI
        run: |
          docker run -d -p 8501:8501 --name ui_test \
            ${{ env.REGISTRY }}/${{ env.ORG }}/${{ env.IMAGE_UI }}:${{ github.ref_name }}
          sleep 10
          curl -f http://localhost:8501 || (docker logs ui_test && exit 1)
          docker stop ui_test

      - name: üì¶ Push UI image to GHCR
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.ORG }}/${{ env.IMAGE_UI }}:${{ github.ref_name }}
