# ============================================================
# 🚀 GitHub Actions: CI/CD for gogoAiHunters MLOps Project
# ------------------------------------------------------------
# 트리거:
#   - main 브랜치 푸시 시 자동 빌드
#   - 태그(v*) 푸시 시 GHCR에 Docker 이미지 업로드
# ============================================================

name: Build and Push to gogoAiHunters GHCR

on:
  push:
    branches:
      - main
    tags:
      - "v*"

env:
  REGISTRY: ghcr.io
  ORG: ${{ github.repository_owner }}   # ✅ 자동 감지로 오너 일치
  IMAGE_API: mlops-cloud-project-mlops-2-api
  IMAGE_UI: mlops-cloud-project-mlops-2-ui

permissions:
  contents: read
  packages: write

jobs:
  # ============================================================
  # 🧩 1️⃣ FastAPI (Backend)
  # ============================================================
  build-api:
    name: Build & Push FastAPI Image
    runs-on: ubuntu-latest

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🧩 Create temporary .env file
        run: |
          echo "MLFLOW_ADDR=http://mlops_runner:5000" > .env
          echo "SPOTIPY_CLIENT_ID=${{ secrets.SPOTIPY_CLIENT_ID }}" >> .env
          echo "SPOTIPY_CLIENT_SECRET=${{ secrets.SPOTIPY_CLIENT_SECRET }}" >> .env
          echo "✅ .env file created successfully."

      - name: 🔑 Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: 🏗️ Build FastAPI Docker image
        run: |
          docker build \
            -f Dockerfile.api \
            -t ${{ env.REGISTRY }}/${{ env.ORG }}/${{ env.IMAGE_API }}:${{ github.ref_name }} .
          echo "✅ FastAPI image built successfully."

      - name: ✅ Healthcheck FastAPI
        run: |
          docker run -d -p 8000:8000 --name api_test \
            ${{ env.REGISTRY }}/${{ env.ORG }}/${{ env.IMAGE_API }}:${{ github.ref_name }}
          echo "🧠 Waiting for FastAPI to start..."
          sleep 15
          curl -f http://localhost:8000/health || (docker logs api_test && exit 1)
          docker stop api_test && docker rm api_test
          echo "✅ FastAPI Healthcheck Passed"

      - name: 📦 Push API image to GHCR
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.ORG }}/${{ env.IMAGE_API }}:${{ github.ref_name }}
          echo "🚀 FastAPI image pushed to GHCR."

  # ============================================================
  # 🖥️ 2️⃣ Streamlit (Frontend)
  # ============================================================
  build-ui:
    name: Build & Push Streamlit UI Image
    runs-on: ubuntu-latest
    needs: build-api

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: 🏗️ Build Streamlit Docker image
        run: |
          docker build \
            -f Dockerfile.ui \
            -t ${{ env.REGISTRY }}/${{ env.ORG }}/${{ env.IMAGE_UI }}:${{ github.ref_name }} .
          echo "✅ Streamlit image built successfully."

      - name: ✅ Healthcheck Streamlit UI
        run: |
          docker run -d -p 8501:8501 --name ui_test \
            ${{ env.REGISTRY }}/${{ env.ORG }}/${{ env.IMAGE_UI }}:${{ github.ref_name }}
          echo "🧠 Waiting for Streamlit UI to start..."
          sleep 20
          curl -f http://localhost:8501 || (docker logs ui_test && exit 1)
          docker stop ui_test && docker rm ui_test
          echo "✅ Streamlit Healthcheck Passed"

      - name: 📦 Push UI image to GHCR
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.ORG }}/${{ env.IMAGE_UI }}:${{ github.ref_name }}
          echo "🚀 Streamlit image pushed to GHCR."
