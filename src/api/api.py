# ============================================================
# üéß Spotify Music Recommender API (Production + CI/CD Safe)
# ------------------------------------------------------------
# Í∏∞Îä• ÏöîÏïΩ:
#  - Spotify API Ïù∏Ï¶ù Î∞è Ìä∏Îûô Ïù¥ÎØ∏ÏßÄ URL Ïó∞Îèô
#  - Finder, FAISS, LGBM, TopN Î™®Îç∏ Î°úÎìú Î∞è ÏòàÏô∏ Ï≤òÎ¶¨
#  - CI/CD ÌôòÍ≤ΩÏóêÏÑú dataset ÎàÑÎùΩ ÏãúÏóêÎèÑ Î∂ÄÌåÖ Ïú†ÏßÄ
# ------------------------------------------------------------
# ÏûëÏÑ±Ïûê: gogoAiHunters Team
# ============================================================

import joblib
import os
from pathlib import Path

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field

from ..model.NModel import LGBMRecommender, FAISSRecommender, Finder
from ..model.logger import RecoLogger, RecommendLog 
from ..model.TopN import TopN_Model  # TopN Î™®Îç∏ Î°úÏßÅ ÏûÑÌè¨Ìä∏

import numpy as np
import time
import pickle
import pandas as pd

import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import requests

# ------------------------------------------------------------
# 1Ô∏è‚É£ FastAPI Ïù∏Ïä§ÌÑ¥Ïä§
# ------------------------------------------------------------
app = FastAPI(title="Spotify Recommender API")

# ------------------------------------------------------------
# 2Ô∏è‚É£ Spotify Ïù∏Ï¶ù (ÏÑúÎ≤Ñ ÏãúÏûë Ïãú 1Ìöå ÏàòÌñâ)
# ------------------------------------------------------------
sp = None
SPOTIPY_ERROR = None

@app.on_event("startup")
def setup_spotify_auth():
    """ÏÑúÎ≤Ñ ÏãúÏûë Ïãú Spotify Ïù∏Ï¶ù ÏãúÎèÑ"""
    global sp, SPOTIPY_ERROR

    CLIENT_ID = os.environ.get('CLIENT_ID')
    CLIENT_SECRET = os.environ.get('CLIENT_SECRET')

    try:
        auth_manager = SpotifyClientCredentials(
            client_id=CLIENT_ID,
            client_secret=CLIENT_SECRET
        )
        sp = spotipy.Spotify(auth_manager=auth_manager)
        SPOTIPY_ERROR = None
        print("‚úÖ Spotify Ïù∏Ï¶ù ÏÑ±Í≥µ. FastAPI ÏÑúÎ≤Ñ Í∞ÄÎèô.")
    except Exception as e:
        print(f"‚ùå Spotify Ïù∏Ï¶ù Ïã§Ìå®. Ïò§Î•ò Î©îÏãúÏßÄ: {e}")
        sp = None
        SPOTIPY_ERROR = str(e)


# ------------------------------------------------------------
# 3Ô∏è‚É£ ÏöîÏ≤≠ Ïä§ÌÇ§Îßà Ï†ïÏùò
# ------------------------------------------------------------
class SearchRequest(BaseModel):
    by: str = "track_name"
    query: str
    limit: int = 50


class RecommendRankedRequest(BaseModel):
    by: str
    query: str
    top_k: int | None = 10


# ------------------------------------------------------------
# 4Ô∏è‚É£ Í≤ΩÎ°ú ÏÑ§Ï†ï
# ------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent.parent
DATA_PATH = BASE_DIR / "dataset" / "processed" / "spotify_data_clean.csv"
MODEL_DIR = BASE_DIR / "models"
MODEL_PATH = BASE_DIR / "models" / "mappings.pkl"
FAISS_PATH = BASE_DIR / "models" / "faiss.index"

FEATURE_COLS = [
    "danceability", "energy", "key", "loudness", "mode", "speechiness",
    "acousticness", "instrumentalness", "liveness", "valence", "tempo", "duration_ms"
]


# ------------------------------------------------------------
# 5Ô∏è‚É£ ÏÑúÎ≤Ñ ÏãúÏûë Ïãú ÏïÑÌã∞Ìå©Ìä∏ Î°úÎìú
# ------------------------------------------------------------
@app.on_event("startup")
def _load_artifacts():
    """Finder, Î™®Îç∏, Îç∞Ïù¥ÌÑ∞ÏÖã Îì± Î°úÎìú"""
    print("üöÄ [Startup] Loading artifacts...")

    # (1) Finder Î°úÎìú
    try:
        app.state.fin = Finder.load(str(MODEL_DIR))
    except FileNotFoundError as e:
        print(f"‚ö†Ô∏è Warning: Finder artifacts not found. ERROR: {e}") 
        app.state.fin = None
    except Exception as e:
        print(f"‚ùå CRITICAL ERROR during Finder load: {e}")
        app.state.fin = None

    # (2) Îç∞Ïù¥ÌÑ∞ Î°úÎìú (CI/CD ÏïàÏ†Ñ Î™®Îìú)
    try:
        if not DATA_PATH.exists():
            print(f"‚ö†Ô∏è DATA not found: {DATA_PATH}. Running API without dataset (CI/CD mode).")
            app.state.df = None  # Îç∞Ïù¥ÌÑ∞ ÏóÜÏù¥ÎèÑ FastAPI Î∂ÄÌåÖ Ïú†ÏßÄ
        else:
            app.state.df = pd.read_csv(DATA_PATH)
            print(f"‚úÖ Dataset loaded successfully: {len(app.state.df)} records.")
            if "image_url" not in app.state.df.columns:
                print("‚ö†Ô∏è Warning: 'image_url' column not found in dataset.")
            if "track_id" not in app.state.df.columns:
                print("‚ö†Ô∏è Warning: dataset missing 'track_id' column.")
    except Exception as e:
        print(f"‚ùå Dataset load failed: {e}")
        app.state.df = None

    # (3) FAISS Ï∂îÏ≤úÍ∏∞ Î°úÎìú
    try:
        app.state.faiss_rec = FAISSRecommender.load(str(MODEL_DIR))
    except FileNotFoundError:
        print("‚ö†Ô∏è FAISS recommender not found (optional).")
        app.state.faiss_rec = None
    except Exception as e:
        print(f"‚ùå Failed to load FAISS recommender: {e}")
        app.state.faiss_rec = None

    # (4) LGBM Î™®Îç∏ Î°úÎìú
    try:
        app.state.lgbm_rec = LGBMRecommender.load(str(MODEL_DIR))
    except FileNotFoundError:
        print("‚ö†Ô∏è LGBM recommender not found (optional).")
        app.state.lgbm_rec = None
    except Exception as e:
        print(f"‚ùå Failed to load LGBM recommender: {e}")
        app.state.lgbm_rec = None

    # (5) TopN Î™®Îç∏ Ï¥àÍ∏∞Ìôî
    try:
        app.state.topn_model = TopN_Model(
            finder=app.state.fin,
            faiss_recommender=app.state.faiss_rec,
            lgbm_recommender=app.state.lgbm_rec,
            data_df=app.state.df
        )
        print("‚úÖ TopN Model initialized successfully.")
    except Exception as e:
        print(f"‚ùå Failed to initialize TopN model: {e}")
        app.state.topn_model = None

    print("[Startup Completed] Models and Data initialized.")


# ------------------------------------------------------------
# 6Ô∏è‚É£ Spotify Ïù¥ÎØ∏ÏßÄ URL Î≥¥Í∞ï
# ------------------------------------------------------------
def enrich_with_image_url(df: pd.DataFrame) -> pd.DataFrame:
    """track_id Í∏∞Ï§ÄÏúºÎ°ú Spotify APIÏóêÏÑú image_url Í∞ÄÏ†∏Ïò§Í∏∞"""
    if sp is None or SPOTIPY_ERROR:
        print(f"‚ö†Ô∏è Spotify API ÎπÑÌôúÏÑ±: {SPOTIPY_ERROR}")
        df["image_url"] = None
        return df

    if df.empty or "track_id" not in df.columns:
        df["image_url"] = None
        return df

    track_ids = df["track_id"].tolist()
    records = [None] * len(track_ids)

    for i in range(0, len(track_ids), 50):
        chunk_ids = track_ids[i:i+50]
        try:
            track_details = sp.tracks(chunk_ids)
            if track_details and track_details.get('tracks'):
                for j, t in enumerate(track_details['tracks']):
                    if t and t.get('album') and t['album'].get('images'):
                        records[i + j] = t['album']['images'][0]['url']
        except requests.exceptions.HTTPError as e:
            print(f"‚ùå Spotify API HTTP Ïò§Î•ò: {e.response.status_code}")
        except Exception as e:
            print(f"‚ùå Spotify API Ìò∏Ï∂ú Ïò§Î•ò: {e}")
            continue

    df["image_url"] = records
    return df


# ------------------------------------------------------------
# 7Ô∏è‚É£ Healthcheck
# ------------------------------------------------------------
@app.get("/health")
def health():
    return {"status": "ok", "message": "Server is running üöÄ"}


# ------------------------------------------------------------
# 8Ô∏è‚É£ Search Endpoint
# ------------------------------------------------------------
@app.post("/search")
def search(req: SearchRequest):
    if app.state.fin is None:
        raise HTTPException(status_code=500, detail="Finder not initialized.")

    try:
        matches = app.state.fin._lookup_indices(by=req.by, query=req.query, max_matches=req.limit)
        idx = app.state.fin.artifacts.id_index
        cols = [c for c in ["track_id", "track_name", "artist_name", "image_url"] if c in idx.columns]
        df = idx.iloc[matches][cols].reset_index(drop=True)

        if "image_url" not in df.columns or df["image_url"].isnull().all():
            df = enrich_with_image_url(df)

        return {"items": df.to_dict(orient="records")}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))


# ------------------------------------------------------------
# 9Ô∏è‚É£ Recommend Endpoint
# ------------------------------------------------------------
@app.post("/recommend_ranked")
def recommend(req: RecommendRankedRequest):
    if app.state.topn_model is None:
        raise HTTPException(status_code=500, detail="TopN model not initialized.")

    try:
        t0 = time.time()
        top_k_limit = req.top_k or 10
        TopN_result = app.state.topn_model.Search(by=req.by, query=req.query, top_k=top_k_limit)
        elapsed = time.time() - t0

        if "image_url" not in TopN_result.columns or TopN_result["image_url"].isnull().all():
            TopN_result = enrich_with_image_url(TopN_result)

        return {"items": TopN_result.to_dict(orient="records"), "elapsed_time": elapsed}
    except Exception as e:
        print(f"‚ùå Error in /recommend_ranked: {e}") 
        raise HTTPException(status_code=400, detail=f"Recommendation failed: {str(e)}")


# ------------------------------------------------------------
# üîü Î°úÏª¨ Ïã§Ìñâ (Í∞úÎ∞ú Ï†ÑÏö©)
# ------------------------------------------------------------
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("src.api.api:app", host="0.0.0.0", port=8000, reload=True)
